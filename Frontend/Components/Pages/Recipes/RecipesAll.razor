@page "/recipes/all"
@inject ItemService ItemService

@inject LoginService LoginService
@inject RecipeService RecipeService
@inject NavigationManager Navigation
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Frontend.Components
@using Frontend.Components.Shared
@using Frontend.Service
@using Frontend.Models

@* <Navbar /> *@

<h3>View All Recipes</h3> @*shows recipe with carousel UI*@

 <div class="card-container">
            <div class="card-body">
                @if(isLoading)
                {
                    <p>Loading Recipes...</p>
                }
                else if(!LoginService.IsAuthenticated)
                {
                    <p>Please <a href="/login">login</a> to see recipes</p>
                }
                else
                {
                    <h6>There are @recipes.Count recipes!</h6>
                    <div class="display-container">
                    <button class="btn btn-light grid-control" type="button" data-bs-target="#display-recipes" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                            
                        </button>
                    <div id="display-recipes" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            @for(int i=0;i<recipes.Count;i++){
                                <button type="button" data-bs-target="#display-recipes" data-bs-slide-to="@i" class="@(i==0?"active":"")" aria-label="Slide @(i+1)"></button>
                            }
                        </div>
                        
                       
                        <div class="carousel-inner">
                        @for (int i=0;i<recipes.Count;i++)
                        {
                            var sr = recipes[i];
                        
                            <div id="recipe" class="carousel-item @(i==0?"active":"")">
                                <img class="recipe-img" src="@sr.ImageUrl" alt="@sr.Name" height="150" />
                                <h4>@sr.Name (@sr.Category.ToString())</h4>
                                @* <div>
                                 @foreach(var i in sr.Ingredients)
                                {
                                    <li>@i.Name</li>
                                }
                                </div>  *@
                                <h5>Description</h5>
                                <p>@sr.Description</p>
                            </div>
                           
                        }
                        </div> @*carousel inner end*@
                         
                        @* <button class="carousel-control-next" type="button" data-bs-target="#display-recipes" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button> *@
                        
                    </div>
                    <button class="btn grid-control" type="button" data-bs-target="#display-recipes" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                            
                        </button>
                    </div>
                }
            </div>
</div>
<style>
.display-container{
    display:grid;
    grid-template-columns: 50px 1fr 50px;
    gap: 10px;
    align-items: center;
    justify-content: center;
    max-width: 500px;
}
#display-recipes{

    min-height: 100%;
    padding:2rem 2rem;
   background-color: white;
   justify-self: center;
   
}
.carousel-control-next-icon,
.carousel-control-prev-icon{
    background-color: black;
    border-radius: 50%;
    padding: 20px;
}
@* #recipe{
    flex: 0 0 auto;
    scroll-snap-align: start;
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 1rem;
    width: 200px;
    text-align: center;
    color:black;
    border-radius: 15px;
    border: 2px solid #000;
} *@
@* #recipe img {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    margin-bottom: 0.5rem;
} *@
#recipe{
    @* display:flex;
    flex-direction: column;
    align-items: center; *@
    border: 1px solid #ccc;
    border-radius: 8px;
    color:black;
    width:300px;
    padding-left: 10px;
}
.recipe-img {
    width: 100%;
    height: 30%;
    border-radius: 4px;
    margin-bottom: 0.5rem;
}



</style>


@code {
    private List<Recipe> recipes = new List<Recipe>(); //all recipes
    private List<RecipeSuggestionModel> SuggestedRecipes = new List<RecipeSuggestionModel>(); //suggested Recipes based on current fridge stock    private bool isLoading = true;
    
    private bool isLoading = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Initializing Login Service...");
            await LoginService.InitializeAsync();
            
            if (LoginService.IsAuthenticated)
            {
                Console.WriteLine("Loading All Recipes...");
                await LoadAllRecipes();

                Console.WriteLine("Loading Suggested Recipes...");
                await LoadSuggestedRecipes();
            }
            
            isLoading = false;
            StateHasChanged();
        }
    }

    @* private string GetCategoryName(int category)
    {
        return category switch
        {
            0=> "Salad",
            1=> "Soup",
            2=> "Main",
            3=> "Side",
            4=> "Vegetarian",
            5=> "Dessert",
        };
    } *@
    private async Task LoadSuggestedRecipes(){  @*Shows recipe suggestion with missign ingredients*@
        int userId = LoginService.GetUserId();
        SuggestedRecipes = await RecipeService.GetSuggestedRecipes(userId);
    }
    private async Task LoadAllRecipes(){ @*all recipes regardless of current ingredient status*@
        int userId = LoginService.GetUserId();
        recipes = await RecipeService.GetAllRecipes();
    }
}