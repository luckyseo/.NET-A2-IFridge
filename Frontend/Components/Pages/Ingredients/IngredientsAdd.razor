@page "/ingredients/add"
@inject NavigationManager Navigation
@inject IngredientService IngredientService
@inject LoginService LoginService

@using Frontend.Components
@using Frontend.Components.Shared
@using Frontend.Service
@using Frontend.Models
@rendermode @(new InteractiveServerRenderMode(prerender: false))




<h3>Add New Ingredients</h3>

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @* add bootstrap form classes *@

    <div class="mb-3">
        <label class="form-label">
            Ingredient:
            <InputText @bind-Value="model.Name" />
        </label>
    </div>

    @* Dropdown list *@
    <div class="mb-3">
        <label class="form-label">
            Category:
            <InputSelect class="form-select" @bind-Value="model.Category">
                <option disabled selected value="">All</option>
                <option value="0">Diary</option>
                <option value="1">Meat</option>
                <option value="2">Vegetable & Fruit</option>
                <option value="3">Grain</option>
                <option value="4">Beverage</option>
                <option value="5">Other</option>
            </InputSelect>
        </label>
    </div>

    <div class="mb-3">
        <label class="form-label">
            Quantity:
            <InputNumber class="form-control" @bind-Value="model.Quantity" />
        </label>
    </div>

    <div class="mb-3">
        <label class="form-label">
            Opened date:
            <InputDate class="form-control" @bind-Value="model.OpenedDate"/>
        </label>
    </div>

    <div class="mb-3">
        <label class="form-label">
            Expired date
            <InputDate class="form-control" @bind-Value="model.ExpiredDate" />
        </label>
    </div>

    <button type="submit" class="btn btn-primary">Add</button>
</EditForm>


@code {
    private Ingredient model = new();
    private string err = string.Empty;
    private async Task OnInitializedAsync()
    {
        await LoginService.InitializeAsync();
    }
    private async Task HandleValidSubmit()
    {
        //IngredientService.AddIngredient(model);
        Console.WriteLine("Form submitted successfully!");
        Console.WriteLine($"Name: {model.Name}, Category: {model.Category}");
        var success = await IngredientService.AddIngredient(model);
        
        if(success){
            Navigation.NavigateTo("/");
        }else{
            err = "Invalid input. Please try again.";
        }
    }

    private void ClearForm() => model = new();


    private List<Ingredient> ingredients = new List<Ingredient>();
    private async Task LoadIngredients(){

    int userId = LoginService.GetUserId();
    ingredients = await IngredientService.GetAllIngredients(userId);

    }
    private List<Ingredient> Expired => ingredients.Where(i => i.ExpiredDate < DateTime.Now).ToList();

}

@* References *@
@* guardrex. (2024, November 12). ASP.NET Core Blazor forms overview. Microsoft.com. https://learn.microsoft.com/en-us/aspnet/core/blazor/forms/?view=aspnetcore-9.0 *@