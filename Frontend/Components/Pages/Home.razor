@* landing page *@
@inject IngredientService IngredientService
@inject LoginService LoginService
@page "/"
@inject NavigationManager Navigation
@rendermode InteractiveServer

@* This where the options goes *@
<Navbar />

<h1>Welcome to IFridge</h1>

<p>My Fridge</p>


@if(ingredients is null || ingredients.Count == 0)
{
   <p>No ingredients found.</p>
   <button class="btn" @onclick="@(() => Navigation.NavigateTo("/ingredients"))">Add Ingredient</button>
}
else{
    <h3>Ingredients in your fridge:</h3>
    <ul>
        @foreach(var ingredient in ingredients)
        {
            @* <li>@ingredient.Name - Expiry Date: @ingredient.ExpiredDate.ToShortDateString()</li> *@
            <li>@ingredient.Name (@GetCategoryName(ingredient.Category)) - Expiry Date: @ingredient.ExpiredDate.ToShortDateString()</li>
        <div class="d-flex align-items-center gap-2">
            <div class="btn-group" role="group">
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => DecreaseQuantity(ingredient)">-</button>
                <button class="btn btn-sm btn-outline-secondary" disabled>@ingredient.Quantity</button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => IncreaseQuantity(ingredient)">+</button>
            </div>
            <button class="btn btn-sm btn-danger" @onclick="() => DeleteIngredient(ingredient.Id)">X</button>
        </div>
        }
        
        
    </ul>

    @if(Expired is not null && Expired.Count > 0)
    {
        <h3 style="color:red;">Expired Ingredients:</h3>
        <ul>
            @foreach(var ingredient in Expired)
            {
                <li>@ingredient.Name - Expiry Date: @ingredient.ExpiredDate.ToShortDateString()</li>
            }
        </ul>
    }
}

@code{
    private List<Ingredient> ingredients = new List<Ingredient>();

    protected override async Task OnInitializedAsync()
    {
        await LoadIngredients();
    }
    private async Task LoadIngredients(){

    int userId = LoginService.GetUserId();
    ingredients = await IngredientService.GetAllIngredients(userId);

    }
    private List<Ingredient> Expired => ingredients.Where(i => i.ExpiredDate < DateTime.Now).ToList();
    private string GetCategoryName(int category)
    {
        return category switch
        {
            0 => "Vegetable",
            1 => "Fruit",
            2 => "Dairy",
            3 => "Meat",
            4 => "Grain",
            5 => "Beverage",
            _ => "Other"
        };
    }

    private async Task IncreaseQuantity(Ingredient ingredient)
    {
        ingredient.Quantity++;
        await IngredientService.UpdateIngredient(ingredient);
        await LoadIngredients();
    }
    private async Task DecreaseQuantity(Ingredient ingredient)
    {
        if (ingredient.Quantity > 0)
        {
            ingredient.Quantity--;
            await IngredientService.UpdateIngredient(ingredient);
            await LoadIngredients();
        }
    }
    private async Task DeleteIngredient(int id){
        await IngredientService.DeleteIngredient(id);
        await LoadIngredients();
    }
}

