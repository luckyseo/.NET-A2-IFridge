@page "/shoppinglist/view"
@inject ItemService ItemService
@* @inject ShoppingListService ListService *@
@inject LoginService LoginService
@inject NavigationManager Navigation
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Frontend.Components
@using Frontend.Components.Shared
@using Frontend.Service
@using Frontend.Models

@* <Navbar /> *@

<h3>View my lists</h3>

 <div class="card-container">
            <div class="card-body">
@if(isLoading)
{
    <p>Loading items...</p>
}
else if(!LoginService.IsAuthenticated)
{
    <p>Please <a href="/login">login</a> to add items.</p>
}

else if(items is null || items.Count == 0)
{
   <p>No items found.</p>
   <button class="btn" @onclick="@(() => Navigation.NavigateTo("/shoppinglist/add"))">Add Item</button>
}
else{
    <div class="list-group d-flex flex-column gap-2">
    @foreach (var item in items)
    {
        <div class="d-flex align-items-center gap-2">
     
                <li class="list-group-item d-flex ">@item.Name
                     <div class="btn-group" role="group">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => DecreaseQuantity(item)">-</button>
                    <button class="btn btn-sm btn-outline-secondary" disabled>@item.Quantity</button>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => IncreaseQuantity(item)">+</button> 
                     </div>
                </li>
            
            <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item.Id)">X</button>
        </div>
    }
</div>
}
     </div>
</div>
@code {
    private List<Item> items = new List<Item>();
    private bool isLoading = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)//this manages loging status
    {
        if (firstRender)
        {
            await LoginService.InitializeAsync();
            
            if (LoginService.IsAuthenticated)
            {
                await LoadItems();
            }
            
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadItems(){

    int userId = LoginService.GetUserId();
    items = await ItemService.GetAllItems(userId);

    }
    private async Task IncreaseQuantity(Item item)
    {
        item.Quantity++;
        await ItemService.UpdateItem(item);
        await LoadItems();
    }
    private async Task DecreaseQuantity(Item item)
    {
        if (item.Quantity > 0)
        {
            item.Quantity--;
            await ItemService.UpdateItem(item);
            await LoadItems();
        }
    }
    private async Task DeleteItem(int id){
        await ItemService.DeleteItem(id);
        await LoadItems();
    }
 
}