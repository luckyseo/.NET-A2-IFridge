@page "/register"

@inject LoginService loginService
@inject NavigationManager Navigation
@using Frontend.Models
@using Frontend.Service
@inject IJSRuntime JS;
@rendermode InteractiveServer

<h3>Sign Up to IFridge</h3>
@* FromName - .NET 8.0 requirement *@
@* Validations are identified on Models folder *@
<div class="registerForm">
<EditForm FormName="registerForm" Model="@model" OnValidSubmit="HandleRegister" class="container">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label class="form-label">First Name</label>
        <InputText @bind-Value="model.firstName" class="form-control"/>
        <ValidationMessage For="@(()=>model.firstName)"/>
    </div>
    <div>
        <label class="form-label">Last Name</label>
        <InputText @bind-Value="model.lastName" class="form-control"/>
        <ValidationMessage For="@(()=>model.lastName)"/>
    </div>
    <div>
        <label class="form-label">Preferred Name</label>
        <InputText @bind-Value="model.preferredName" class="form-control"/>
    </div>
    <div>
        <label class="form-label">Allergies</label>
        <InputText @bind-Value="model.allergies" class="form-control" placeholder="e.g. peanut, diary"/>
    </div>
    <div>
        <label class="form-label">ID</label>
        <div class="input-group">
            <InputText @bind-Value="model.loginId" @onblur="CheckIdAvailability"class="form-control"/>
            <button type=button @onclick="CheckIdAvailability" disabled= "@isCheckingId">
            @if(isCheckingId){
                <span>Checking ...</span>
            }
            else{
                <span>Check</span>
            }
            </button>
        </div>
        <ValidationMessage For="@(()=>model.loginId)"/>
    </div>
    <div>
        <label class="form-label">PW</label>
        <InputText @bind-Value="model.pw" class="form-control"/>
        <ValidationMessage For="@(()=>model.pw)"/>
    </div>
    <button id="signupBtn" type="submit" class="btn btn-primary">Sign Up</button>
</EditForm>
</div>
<div>
    <p>Already registered? </p><a href="/login">Login</a>
</div>
<style>
.registerForm{
width:350px;
}
.registerForm button{
    margin-left:10px;
    border-radius: 5px;
}
#signupBtn{
    margin:10px;
}
</style>
@code {
     //[SupplyParameterFromForm]
    private RegisterModel model{get;set;} = new();
    private string err = string.Empty;

    private bool isCheckingId=false;
    private bool idExists = false;
    private string idCheckingMessage = string.Empty;

    private async Task CheckIdAvailability(){ @*Checked whether this id is already in use*@
        if(string.IsNullOrWhiteSpace(model.loginId)){
            idCheckingMessage =string.Empty;
            return;
        }
        isCheckingId = true;
        idCheckingMessage = "Checking availbilty";
        idExists = await loginService.CheckIdExistsAsync(model.loginId);

        if(idExists){
            idCheckingMessage="Already exists";
            await JS.InvokeVoidAsync("alert",idCheckingMessage);
        }
        else{
            idCheckingMessage="Available ID";
            await JS.InvokeVoidAsync("alert",idCheckingMessage);
        }
        isCheckingId=false;
    }
    private async Task HandleRegister()  @*If registeration is successful, it shows ingridient list page*@
    {
        var success = await loginService.RegisterAsync(model);
        if(success){
            Navigation.NavigateTo("/");
        }else{
            err = "Invalid Id/pw";
        }
    }

    private void ClearForm() => model = new();
}
