// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Backend.Domain.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OpenedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "VegetableAndFruit",
                            ExpiredDate = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tomato",
                            OpenedDate = new DateTime(2025, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = "Dairy",
                            ExpiredDate = new DateTime(2025, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Milk",
                            OpenedDate = new DateTime(2025, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = "Meat",
                            ExpiredDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Salmon",
                            OpenedDate = new DateTime(2025, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Category = "Meat",
                            ExpiredDate = new DateTime(2025, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Egg",
                            OpenedDate = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 12,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Category = "Beverage",
                            ExpiredDate = new DateTime(2026, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Coke",
                            OpenedDate = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Category = "Meat",
                            ExpiredDate = new DateTime(2025, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chicken",
                            OpenedDate = new DateTime(2025, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 3,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShoppingListId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingListId");

                    b.HasIndex("UserId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Eggs",
                            Quantity = 12,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bread",
                            Quantity = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Milk",
                            Quantity = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Classic tomato soup recipe",
                            ImageUrl = "https://example.com/soup.jpg",
                            Name = "Tomato Soup",
                            Steps = "Boil tomatoes, blend, add spices."
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tasty tomato with fried egg",
                            ImageUrl = "https://example.com/egg.jpg",
                            Name = "Tomato and Egg",
                            Steps = "Cut tomator, fried scramble egg then mix together and add ketchup also seasoning."
                        },
                        new
                        {
                            Id = 3,
                            Description = "A famous Chinese sweet chicken dish",
                            ImageUrl = "https://example.com/chicken.jpg",
                            Name = "Chicken and Coke",
                            Steps = "Cut chicken, season with salt and pepper then pan-fry chicken until golden, put Coke and Chinese spices to braise until all cooked."
                        },
                        new
                        {
                            Id = 4,
                            Description = "A simple lemon salmon with butter",
                            ImageUrl = "https://example.com/salmon.jpg",
                            Name = "Baked Lemon Salmon",
                            Steps = "Season salmon, put to oevn or pan fry until turn golden, add butter and saute garlic, finish with lemon juice."
                        },
                        new
                        {
                            Id = 5,
                            Description = "An easy and hearty salmon with tomato",
                            ImageUrl = "https://example.com/tomatoSalmon.jpg",
                            Name = "Salmon with Tomato",
                            Steps = "Cut tomato in slices, season with salt, pan-fry tomato until soft then add salmon, cook until ready, add herbs."
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            RecipeId = 2,
                            IngredientId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            RecipeId = 2,
                            IngredientId = 4,
                            Quantity = 2
                        },
                        new
                        {
                            RecipeId = 3,
                            IngredientId = 6,
                            Quantity = 1
                        },
                        new
                        {
                            RecipeId = 3,
                            IngredientId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            RecipeId = 4,
                            IngredientId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            RecipeId = 5,
                            IngredientId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            RecipeId = 5,
                            IngredientId = 1,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.ShoppingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingLists");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("loginId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("preferredName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pw")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergies = "",
                            firstName = "Joe",
                            lastName = "Lian",
                            loginId = "joelian1",
                            preferredName = "Joe",
                            pw = "joelian123"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.Ingredient", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User", "User")
                        .WithMany("Ingredients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Item", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ShoppingList", null)
                        .WithMany("Items")
                        .HasForeignKey("ShoppingListId");

                    b.HasOne("Backend.Domain.Entities.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ShoppingList", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ShoppingList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
